// generated by ginger from go generate -- DO NOT EDIT

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/mattn/go-sqlite3"
        "github.com/tommy351/gin-cors"
)

type Config struct {
	SvcHost    string
	DbUser     string
	DbPassword string
	DbHost     string
	DbName     string
	Token      string
	Url        string
}


type TwitterService struct {
}

func (s *TwitterService) getDb(cfg Config) (gorm.DB, error) {
	db, err := gorm.Open("sqlite3", cfg.DbName)
	//db.LogMode(true)
	return db, err
}

func (s *TwitterService) Migrate(cfg Config) error {
	db, err := s.getDb(cfg)
	if err != nil {
		return err
	}
	db.SingularTable(true)

	db.AutoMigrate(&Twitter{})
	return nil
}
func (s *TwitterService) Run(cfg Config) error {
	s.Migrate(cfg)
        db, err := s.getDb(cfg)
	if err != nil {
		return err
	}
	db.SingularTable(true)

	twitterResource := &TwitterResource{db: db}

	r := gin.Default()
	//gin.SetMode(gin.ReleaseMode)
        r.Use(cors.Middleware(cors.Options{}))

	r.GET("/twitter", twitterResource.GetAllTwitters)
	r.GET("/twitter/:id", twitterResource.GetTwitter)
	r.POST("/twitter", twitterResource.CreateTwitter)
	r.PUT("/twitter/:id", twitterResource.UpdateTwitter)
	r.PATCH("/twitter/:id", twitterResource.PatchTwitter)
	r.DELETE("/twitter/:id", twitterResource.DeleteTwitter)

	r.Run(cfg.SvcHost)

	return nil
}

