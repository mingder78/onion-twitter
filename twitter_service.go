// generated by ginger from go generate -- DO NOT EDIT

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/mattn/go-sqlite3"
	"github.com/tommy351/gin-cors"
)

type Config struct {
	SvcHost    string
	DbUser     string
	DbPassword string
	DbHost     string
	DbName     string
	Token      string
	Url        string
}

type TwitterService struct {
}

func (s *TwitterService) getDb(cfg Config) (gorm.DB, error) {
	db, err := gorm.Open("sqlite3", cfg.DbName)
	db.LogMode(true)
	return db, err
}

func (s *TwitterService) Migrate(cfg Config) error {
	db, err := s.getDb(cfg)
	if err != nil {
		return err
	}
	db.SingularTable(true)

	db.AutoMigrate(&Twitter{})
	db.AutoMigrate(&User{})
	return nil
}
func (s *TwitterService) Run(cfg Config) error {
	s.Migrate(cfg)
	db, err := s.getDb(cfg)
	if err != nil {
		return err
	}
	db.SingularTable(true)

	twitterResource := &TwitterResource{db: db}

	r := gin.Default()
	//gin.SetMode(gin.ReleaseMode)
	r.Use(cors.Middleware(cors.Options{}))

	ba := r.Group("/", gin.BasicAuth(gin.Accounts{
		"paul": "1234",
		"ming": "1234",
	}))

	ba.GET("/twitter", twitterResource.GetAllTwitters)
	ba.GET("/twitter/:id", twitterResource.GetTwitter)
	ba.POST("/twitter", twitterResource.CreateTwitter)
	ba.PUT("/twitter/:id", twitterResource.UpdateTwitter)
	ba.PATCH("/twitter/:id", twitterResource.PatchTwitter)
	ba.DELETE("/twitter/:id", twitterResource.DeleteTwitter)

	//for user
	ba.GET("/user", twitterResource.GetAllUsers)
	ba.GET("/user/:id", twitterResource.GetUser)
	ba.POST("/user", twitterResource.CreateUser)
	ba.PUT("/user/:id", twitterResource.UpdateUser)
	ba.PATCH("/user/:id", twitterResource.PatchUser)
	ba.DELETE("/user/:id", twitterResource.DeleteUser)

	//user+twitter
	ba.POST("/twitter/user/:id", twitterResource.CreateTwitterByUserId)
	ba.GET("/user/:id/twitter", twitterResource.GetTwittersByUserId)

	r.Run(cfg.SvcHost)

	return nil
}
